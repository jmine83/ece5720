# Names: Joel Meine & Paul Roylance
# IDs: A01764207 & A01875212
# Source: sim/y86-code/asumr.ys

# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main				# Execute main program
	halt					# Terminate program

# Sample linked list
.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

main:
	irmovq ele1,%rdi
	call rsum_list			# rsum_list(ele1)
	ret

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:
	xorq %rax,%rax			# Set return value to 0
	andq %rdi,%rdi			# Set condition codes
	je return				# If ls == null, return 0
	pushq %rbx				# Save callee-saved register
	mrmovq (%rdi),%rbx		# Put ls->val into val
	mrmovq 8(%rdi),%rdi		# Put ls->next into rest
	call rsum_list
	addq %rbx,%rax          # Add rest to val
	popq %rbx				# Restore callee-saved register
return:
	ret

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
